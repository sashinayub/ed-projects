1. Возврат значений из функции return, алгоритмы с заданной точностью для расчёта

13.6 Практическая работа
Цели практической работы
•	Научиться:
o	возвращать результат из функции — return;
o	передавать значения, объекты в функции через аргументы;
o	использовать несколько операторов return в функции;
o	использовать алгоритмы с заданной точностью для расчёта.
•	Изучить способы возврата значений из функции — return.
•	Узнать:
o	о передаче объектов в функцию и их поведении при изменении внутри функции;
o	об особенностях сравнения чисел с плавающей точкой.

Задача 1. Урок информатики 2
В прошлый раз учитель написал программу, которая выводит числа в формате плавающей точки, однако он вспомнил, что не учёл одну важную вещь: числа-то могут идти от нуля.
Задано положительное число x (x > 0). Ваша задача — преобразовать его в формат плавающей точки, то есть x = a * 10^b, где 1 ≤ a < 10. Обратите внимание, что x теперь больше нуля, а не больше единицы. Обеспечьте контроль ввода.

def floating_point(number): 
  count = 0 
  if number >= 10: 
    while number >= 10: 
      number /= 10 
      count += 1 
    number = round((number), count)
    
  elif 0 < number < 1: 
    while number < 1: 
      number *= 10 
      count += 1 
    number = round((number), count)
  print('Формат плавающей точки: x =', number, '* 10 **', count) 
   
number = float(input('Введите число: ')) 
if number <= 0: 
  print('Ошибка ввода. Число должно быть больше нуля.') 
else: 
  floating_point(number)

Задача 2. Функция максимума
Юра пишет различные полезные функции для Python, чтобы остальным программистам стало проще работать. Он захотел написать функцию, которая будет находить максимум из перечисленных чисел. Функция для нахождения максимума из двух чисел у него уже есть. Юра задумался: может быть, её можно как-то использовать для нахождения максимума уже от трёх чисел?
Помогите Юре написать программу, которая находит максимум из трёх чисел. Для этого используйте только функцию нахождения максимума из двух чисел.
По итогу в программе должны быть реализованы две функции:
1.	maximum_of_two — функция принимает два числа и возвращает одно (наибольшее из двух);
2.	maximum_of_three — функция принимает три числа и возвращает одно (наибольшее из трёх); при этом она должна использовать для сравнений первую функцию maximum_of_two.
 
def maximum_of_two(number_1, number_2): 
  if number_1 > number_2: 
    return number_1 
  else: 
    return number_2 

def maximum_of_three(max_number, number_3): 
  if max_number > number_3: 
    return max_number 
  else: 
    return number_3 

number_1 = int(input('Введите первое число: '))
number_2 = int(input('Введите второе число: '))
number_3 = int(input('Введите третье число: '))

max_number = maximum_of_two(number_1, number_2) 
print('Максимальное число:', maximum_of_three(max_number, number_3))

Задача 3. Число наоборот 2
Пользователь вводит два числа: N и K. Напишите программу, которая заменяет каждое число на число, которое получается из исходного записью его цифр в обратном порядке, затем складывает их, снова переворачивает и выводит ответ на экран.
Пример: 
Введите первое число: 102
Введите второе число: 123
Первое число наоборот: 201
Второе число наоборот: 321
Сумма: 522
Сумма наоборот: 225
def turn_over(num):
  count = 0
  while num > 0:
    count = count * 10 + num % 10
    num = num // 10
  return count

n = int(input('Введите первое число: ')) 
k = int(input('Введите второе число: ')) 

summ = turn_over(n) + turn_over(k)

print('Первое число наоборот:', turn_over(n))
print('Второе число наоборот:', turn_over(k)) 
print('Сумма:', summ) 
print('Сумма наоборот:', turn_over(summ))



Задача 4. Недоделка 2
Вы всё так же работаете в конторе по разработке игр и смотрите различные программы прошлого горе-программиста. В одной из игр для детей, связанной с мультяшной работой с числами, вам нужно было написать код согласно следующим условиям: программа получает на вход два числа; в первом числе должно быть не менее трёх цифр, во втором — не менее четырёх, иначе программа выдаёт ошибку. Если всё нормально, то в каждом числе первая и последняя цифры меняются местами, а затем выводится их сумма.
И тут вы натыкаетесь на программу, которая была написана предыдущим программистом и которая как раз решает такую задачу. Однако старший программист попросил вас немного переписать этот код, чтобы он не выглядел так ужасно. Да и вам самим становится, мягко говоря, не по себе от него.
Постарайтесь разделить логику кода на три отдельные логические части (функции):
1.	count_numbers — получает число и возвращает количество цифр в числе;
2.	change_number — получает число, меняет в нём местами первую и последнюю цифры и возвращает изменённое число;
3.	main — функция ничего не получает на вход, внутри она запрашивает нужные данные от пользователя, выполняет дополнительные проверки и вызывает функции 1 и 2 для выполнения задачи (проверки и изменения двух чисел).
Разбейте приведённую ниже программу на функции. Повторений кода должно быть как можно меньше. Также сделайте, чтобы в основной части программы был только ввод чисел, затем изменённые числа и вывод их суммы.
first_n = int(input("Введите первое число: "))

first_num_count = 0
temp = first_n

while temp > 0:
    first_num_count += 1
    temp = temp // 10   
if first_num_count < 3:
 print("В первом числе меньше трёх цифр.")
else:
 last_digit = first_n % 10
 first_digit = first_n // 10 ** (first_num_count - 1)
 between_digits = first_n % 10 ** (first_num_count - 1) // 10
 first_n = last_digit * 10 ** (first_num_count - 1) + between_digits * 10 + first_digit
 print('Изменённое первое число:', first_n)

 second_n = int(input("\nВведите второе число: "))

 second_num_count = 0
 temp = second_n
 while temp > 0:
   second_num_count += 1
   temp = temp // 10   

 if second_num_count < 4:
   print("Во втором числе меньше четырёх цифр.")
 else:
   last_digit = second_n % 10
   first_digit = second_n // 10 ** (second_num_count - 1)
   between_digits = second_n % 10 ** (second_num_count - 1) // 10
   second_n = last_digit * 10 ** (second_num_count - 1) + between_digits * 10 + first_digit

   print('Изменённое второе число:', second_n)

   print('\nСумма чисел:', first_n + second_n)
print('Задача 4. Недоделка 2\n')

def count_numbers(first_n, second_n):
    temp = first_n
    first_num_count = 0
    temp2 = second_n
    second_num_count = 0

    while temp > 0:
        first_num_count += 1
        temp = temp // 10

    while temp2 > 0:
        second_num_count += 1
        temp2 = temp2 // 10
    return first_num_count, second_num_count

def change_number(first_n, first_num_count, second_n, second_num_count):
    last_digit = first_n % 10
    first_digit = first_n // 10**(first_num_count - 1)
    between_digits = first_n % 10**(first_num_count - 1) // 10
    first_n = last_digit * 10**(first_num_count - 1) + between_digits * 10 + first_digit
    print('Изменённое первое число:', first_n)
    last_digit = second_n % 10
    first_digit = second_n // 10 ** (second_num_count - 1)
    between_digits = second_n % 10 ** (second_num_count - 1) // 10
    second_n = last_digit * 10 ** (second_num_count - 1) + between_digits * 10 + first_digit
    print('Изменённое второе число:', second_n)
    return first_n, second_n

def main():
    first_n = int(input("Введите первое число: "))
    second_n = int(input("\nВведите второе число: "))
    first_num_count, second_num_count = count_numbers(first_n , second_n)
    if first_num_count < 3:
        print("В первом числе меньше трёх цифр.")
        print(first_n)
    if second_num_count < 4:
        print("Во втором числе меньше четырёх цифр.")
        print(second_n)
    else:
       first_n, second_n = change_number(first_n, first_num_count, second_n, second_num_count)
       print('\nСумма чисел:',first_n + second_n)

main()

Задача 5. Маятник
Известно, что амплитуда качающегося маятника с каждым разом затухает на 8,4% от амплитуды предыдущего колебания. Если качнуть маятник, то, строго говоря, он не остановится никогда, просто амплитуда будет постоянно уменьшаться до тех пор, пока мы не сочтём такой маятник остановившимся. Напишите программу, определяющую, сколько раз качнётся маятник, прежде чем он, по нашему мнению, остановится.
Программа получает на вход начальную амплитуду колебания в сантиметрах и конечную амплитуду колебаний, которая считается остановкой маятника. Обеспечьте контроль ввода.
Пример:
Введите начальную амплитуду: 1
Введите амплитуду остановки: 0.1
Маятник считается остановившимся через 27 колебаний
Что оценивается
•	Результат вывода соответствует условию.
•	Input содержит корректное приглашение для ввода.
•	Формат вывода соответствует примеру.
•	Вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием).
# Ввод начальной амплитуды
initial_amplitude = float(input("Введите начальную амплитуду: "))
# Ввод амплитуды остановки
stop_amplitude = float(input("Введите амплитуду остановки: "))

# Проверка корректности ввода
if initial_amplitude <= 0:
    print("Начальная амплитуда должна быть положительным числом.")
    exit()
if stop_amplitude <= 0:
    print("Амплитуда остановки должна быть положительным числом.")
    exit()
if stop_amplitude >= initial_amplitude:
    print("Амплитуда остановки должна быть меньше начальной амплитуды.")
    exit()

# Коэффициент затухания (8,4% уменьшения, значит оставшаяся часть 91.6%)
decay_factor = 0.916

# Инициализация переменных
amplitude = initial_amplitude
count = 0

# Цикл, пока амплитуда не станет меньше или равна конечной
while amplitude > stop_amplitude:
    amplitude *= decay_factor
    count += 1

print(f"Маятник считается остановившимся через {count} колебаний")

Без exit
print('Задача 5. Маятник')

initial_amplitude = float(input("Введите начальную амплитуду: "))
stop_amplitude = float(input("Введите амплитуду остановки: "))

if initial_amplitude <= 0:
  print("Начальная амплитуда должна быть положительным числом.")
elif stop_amplitude <= 0:
  print("Амплитуда остановки должна быть положительным числом.")
elif stop_amplitude >= initial_amplitude:
  print("Амплитуда остановки должна быть меньше начальной амплитуды.")
else:
  decay_factor = 0.916

amplitude = initial_amplitude
count = 0

while amplitude > stop_amplitude:
  amplitude *= decay_factor
  count += 1

print(f"Маятник считается остановившимся через {count} колебаний")


Задача 6. Яйца
В рамках программы колонизации Марса компания «Спейс Инжиниринг» вывела особую породу черепах, которые, по задумке, должны размножаться, откладывая яйца в марсианском грунте. Откладывать яйца слишком близко к поверхности опасно из-за радиации, а слишком глубоко — из-за давления грунта и недостатка кислорода. Вообще, факторов очень много, но специалисты проделали большую работу и предположили, что уровень опасности для черепашьих яиц рассчитывается по формуле: D = x^3 − 3x^2 − 12x + 10, где x — глубина кладки в метрах, а D — уровень опасности в условных единицах. Для тестирования гипотезы нужно взять пробу грунта на безопасной, согласно формуле, глубине.
Напишите программу, находящую такое значение глубины х, при котором уровень опасности как можно более близок к нулю. На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля, а программа должна рассчитать приблизительное значение х, удовлетворяющее этому отклонению. Известно, что глубина точно больше нуля и меньше четырёх метров. Обеспечьте контроль ввода. 
Пример:
Введите максимально допустимый уровень опасности: 0.01
Приблизительная глубина безопасной кладки: 0.732421875 м
Что оценивается
•	Результат вывода соответствует условию.
•	Input содержит корректное приглашение для ввода.
•	Формат вывода соответствует примеру.
•	Вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием).
# Запрашиваем у пользователя максимально допустимое отклонение
tolerance = float(input("Введите максимально допустимое отклонение уровня опасности от нуля: "))

# Инициализируем переменные для хранения лучшего результата
best_x = 0.0  # начнем с 0
best_diff = 10**9  # очень большое число, чтобы сравнивать

# Перебираем значения x от 0 до 4 с шагом 0.001
x = 0.0
found = False  # флаг, что нашли подходящее значение
while x <= 4:
    # Вычисляем уровень опасности для текущего x
    D = x**3 - 3*x**2 - 12*x + 10
    # Находим абсолютное значение разницы с нулём
    diff = abs(D)
    # Проверяем, если разница меньше или равна допустимому отклонению и лучше предыдущих результатов
    if diff <= tolerance and diff < best_diff:
        best_diff = diff
        best_x = x
        found = True
    x += 0.001

# После цикла проверяем, нашли ли подходящее значение
if found:
    print(f"Приблизительная глубина безопасной кладки: {best_x:.9f} м")
else:
    print("Не удалось найти подходящую глубину в заданных пределах и с заданной точностью.")

# Функция для вычисления уровня опасности (можно определить прямо перед основным кодом)
def level_of_danger(x):
    return x**3 - 3*x**2 - 12*x + 10
def level_of_danger(x):
    return x**3 - 3*x**2 - 12*x + 10

tolerance = float(input("Введите максимально допустимый уровень опасности (от нуля): "))

best_x = 0
best_diff = 10**9
x = 0.0
found = False

while x < 4:
  D = x**3 - 3*x**2 - 12*x + 10
  diff = abs(D)
  if diff <= tolerance and diff < best_diff:
    best_diff = diff
    best_x = x
    found = True
  # print(x)
  x += 0.0001

if found:
  print(f"Приблизительная глубина безопасной кладки: {best_x:.9f} м")
else:
  print("Ошибка!")

2. Функции

12.6 Практическая работа
Цели практической работы
Научиться:
•	разбивать программу на функции и выделять блоки, которые могут быть использованы повторно;
•	передавать значения, объекты в функции через аргументы;
•	использовать двойное сравнение (chained comparison).
Задача 1. Сумма чисел
Напишите функцию summa_n, которая принимает одно целое положительное число N и выводит сумму всех чисел от 1 до N включительно.
Пример работы программы:
Введите число: 5
Я знаю, что сумма чисел от 1 до 5 равна 15
number = int(input('Введите число: '))
def summa_n(number):
  summ = 0
  for i_num in range(1, number + 1):
    summ += i_num
  print('Я знаю, что сумма чисел от 1 до', number, 'равна ', summ)
summa_n(number)

Задача 2. Функция в функции
Евгений проходит специальный тест по программированию. Всё шло хорошо, пока герой не наткнулся на тему «Функции». Задание звучит так:
Основная ветка программы, не считая заголовков функций, состоит из одной строки кода. Это вызов функции test(). В ней запрашивается на ввод целое число. Если оно положительное, то вызывается функция positive(), тело которой содержит команду вывода на экран слова «Положительное». Если число отрицательное, то вызывается функция negative(), её тело содержит выражение вывода на экран слова «Отрицательное».
Помогите Евгению и реализуйте такую программу.
def positive():
  print('Положительное')
def negative():
  print('Отрицательное')

number = int(input('Введите целое число: '))
def test(number):
  if number > 0:
    positive()
  elif number < 0:
    negative()
  else:
    print('Ошибка ввода.')
test(number)

Задача 3. Апгрейд калькулятора
Степан использует калькулятор для расчёта суммы и разности чисел, но на работе ему требуются не только обычные арифметические действия. Он ничего не хочет делать вручную, поэтому решил немного расширить функционал калькулятора.
Напишите программу, запрашивающую у пользователя число и действие, которое нужно сделать с числом: вывести сумму его цифр, максимальную или минимальную цифру. Каждое действие оформите в виде отдельной функции, а основную программу зациклите.
Запрошенные числа должны передаваться в функции суммы, максимума и минимума при помощи аргументов.
def summ_number(number):
  summ = 0
  while number > 0:
    summ += number % 10
    number //= 10
  print('Сумма цифр: ', summ)

def max_number(number):
  max_num = 0
  while number > 0:
    if number % 10 > max_num:
      max_num = number % 10
    number //= 10
  print('Максимальная цифра: ', max_num)

def min_number(number):
  min_num = 9
  while number > 0:
    if number % 10 < min_num:
      min_num = number % 10
    number //= 10
  print('Минимальная цифра: ', min_num)

while True:
  number = int(input('Введите число: '))
  action = int(input('Введите номер действия: 1 - сумма цифр, 2 - максимальная цифра, 3 - минимальная цифра \n'))
  if action == 1:
    summ_number(number)
  elif action == 2:
    max_number(number)
  elif action == 3:
    min_number(number)
  else:
    print('Ошибка ввода')
  print()

Задача 4. Число наоборот
Вводится последовательность чисел, оканчивающаяся нулём. Реализуйте функцию, которая принимает в качестве аргумента каждое число, переворачивает его и выводит на экран.
Пример:
Введите число: 1234
Число наоборот: 4321
Введите число: 1000
Число наоборот: 0001
Введите число: 0
Программа завершена!
def new_number(): 
    num = input("Введите целое число: ") 
    new_number = num[::-1] 
    if num == "0": 
        print("Программа завершена!") 
    else: 
        print(f"Число наоборот: {new_number}", end='') 

new_number()

Дополнительно: добейтесь такого вывода чисел, в начале которых идут нули.
Пример:
Введите число: 1230
Число наоборот: 321
Ноль, который мы убрали, называется ведущим.
def new_number():
  num = int(input("Введите целое число: "))
  new_num = 0

  while num != 0:
    for i in range(num):
      last = num % 10
      if last == 0:
        num = num // 10
      else:
        num = num // 10 # отбрасываем ее
        new_num = new_num * 10 + last  # добавляем следующую цифру
    print(f"Число наоборот: {new_num}", end='\n')
    new_number()
    
  else:
    print("Программа завершена!")
    
new_number()

Задача 5. Текстовый редактор
Продолжаем разрабатывать новый текстовый редактор. В этот раз нам поручили написать для него код, который считает, сколько раз в тексте встречается любая выбранная буква или цифра (а не только буквы Ы, как раньше). 
Напишите функцию count_letters(), которая принимает на вход текст и подсчитывает, какое в нём количество цифр K и букв N. Функция должна вывести на экран информацию о найденных буквах и цифрах в определённом формате.
Пример:
Введите текст: 100 лет в обед
Какую цифру ищем? 0
Какую букву ищем? Л
Количество цифр 0: 2
Количество букв Л: 1
text = input('Введите последовательность чисел: ')

def count_letters(text, number, letter):
  count_number = 0
  count_letter = 0

  for i in text:
    if i == number:
      count_number += 1
    elif i == letter:
      count_letter += 1
  print('Количество цифр ', number, ':', count_number)
  print('Количество букв ', letter, ':', count_letter)

number = input('Какую цифру ищем? ')
letter = input('Какую букву ищем? ')
count_letters(text, number, letter)
Задача 6. НОД
Напишите функцию, вычисляющую наибольший общий делитель двух чисел.
def gcd (a, b):
  while a != 0 and b != 0:
    if a > b:
      a = a % b
    else:
      b = b % a
  print ('Наибольший общий делитель:', a + b)

gcd(30,18)

Задача 7. Недоделка
Вы пришли на работу в компанию по разработке игр, целевая аудитория — дети и их родители. У предыдущего программиста было задание сделать две игры в одном приложении, чтобы пользователь мог выбирать одну из них. Однако программист, на место которого вы пришли, перед увольнением не успел выполнить эту задачу и оставил только небольшой шаблон проекта. Используя этот шаблон, реализуйте игры «Камень, ножницы, бумага» и «Угадай число».
Правила игры «Камень, ножницы, бумага»: программа запрашивает у пользователя строку и выводит, победил он или проиграл. Камень бьёт ножницы, ножницы режут бумагу, бумага кроет камень.
Правила игры «Угадай число»: программа запрашивает у пользователя число до тех пор, пока он не отгадает загаданное.
def rock_paper_scissors():
  # Здесь будет игра «Камень, ножницы, бумага»

def guess_the_number():
  # Здесь будет игра «Угадай число»

def mainMenu():
  # Здесь главное меню игры

mainMenu():
  pass

def rock_paper_scissors():
  print('Игра "Камень, ножницы, бумага"')
  print('Введите "камень", "ножницы" или "бумага"')
  user_choice = input('Ваш выбор: ')
  if user_choice == 'камень':
    print('Ничья')
  elif user_choice == 'ножницы':
    print('Вы проиграли')
  elif user_choice == 'бумага':
    print('Вы выиграли')
  else:
    print('Ошибка ввода')
    print()
  main_menu()

def guess_the_number():
  print('Угадай число!')
  while True:
    number = int(input('Введите число: '))
    if number < 5:
      print('Число меньше, чем нужно. Попробуйте ещё раз!')
    elif number > 5:
      print('Число больше, чем нужно. Попробуйте ещё раз!')
    else:
      print('Вы угадали!')
      print()
      main_menu()

def main_menu():
  print('Выберете игру: 1 - Камень, ножницы, бумага; 2 - Угадай число')
  choice = int(input('Введите номер игры: '))
  if choice == 1:
    rock_paper_scissors()
  elif choice == 2:
    guess_the_number()
  else:
    print('Ошибка ввода: нужно ввести 1 или 2')
    print()

main_menu()

3. Float, round, math

11.6 Практическая работа
Цели работы
Научиться:
•	решать задачи с новым типом данных — float;
•	применять в решениях функцию округления чисел — round;
•	переводить float в int и разбираться в неявном приведении типов;
•	применять встроенный модуль math для решения задач.
Что входит в работу
•	Задача 1. Конвертация.
•	Задача 2. Грубая математика. 
•	Задача 3. Убийца Steam.
•	Задача 4. Первая цифра.
•	Задача 5. Вот это объёмы!
•	Задача 6. Ход конём.
•	Задача 7. За что?
Задача 1. Конвертация
При оплате покупок картой за рубежом банки делают конвертацию через промежуточную валюту. Например, если оплачивать отечественной картой товар в евро, то сначала эта сумма конвертируется в доллары, а потом — в рубли.
Напишите программу, которая получает на вход стоимость покупки в евро, а затем выводит ответ в рублях. Представим, что мы живём в альтернативной реальности, где 1 евро = 1.25 доллара, а 1 доллар = 60.87 руб.
euro = int(input('Стоимость покупки в евро: '))
ruble = round(euro * 1.25 * 60.87, 2)
print('Стоимость покупки в руб.:', ruble)

Задача 2. Грубая математика
В одном центре математического анализа работал практикант, который писал программы для расчёта функций. Однажды он очень устал и неправильно понял техническое задание, поэтому функции стали грубо рассчитываться. 
Его программа работает следующим образом: вводится последовательность из N вещественных чисел, при этом положительные числа округляются вверх, а отрицательные — вниз. 
Напишите программу, которая выводит натуральный логарифм от числа, если оно положительное, и экспоненту в степени числа, если оно отрицательное.
Пример:
Введите кол-во чисел: 3
Введите число: 1.3
x = 2 log(x) = 0.6931471805599453
Введите число: -2.1
x = -3 exp(x) = 0.049787068367863944
Введите число: -5.9
x = -6 exp(x) = 0.0024787521766663585
import math
number = int(input('Введите количество чисел: '))
for num in range(number):
  new_number = float(input('Введите число: '))
  if new_number > 0:
    x = math.ceil(new_number)
    log = math.log(x)
    print(f"x = {x} log(x) = {log}")
  elif new_number < 0:
    x = math.floor(new_number)
    exp = math.exp(x)
    print(f"x = {x} exp(x) = {exp}")

Задача 3. Аналог Steam
Вы пишете программу-инсталлятор для компьютерной игры. Пока инсталлятор скачивает обновление, для пользователя необходимо отображать количество скачанных процентов, чтобы он понимал, успеет ли заварить чай, прежде чем завершится процесс. Каждое обновление игры требует разного количества мегабайт, при этом у разных игроков разная скорость интернет-соединения.
Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения в мегабайтах в секунду. Для каждой секунды программа должна рассчитывать и выводить на экран процент скачанного объёма до тех пор, пока скачивание не завершится. В конце программа должна показать, сколько секунд заняло скачивание обновления. Обеспечьте контроль ввода.
Пример:
Укажите размер файла для скачивания: 123
Какова скорость вашего соединения: 27
Прошло 1 сек. Скачано 27 из 123 Мб (22%)
Прошло 2 сек. Скачано 54 из 123 Мб (44%)
Прошло 3 сек. Скачано 81 из 123 Мб (66%)
Прошло 4 сек. Скачано 108 из 123 Мб (88%)
Прошло 5 сек. Скачано 123 из 123 Мб (100%)
file = int(input('Укажите размер файла (Мб): '))
speed = int(input('Какова скорость вашего соединения? (Мб/сек.) '))
second = 1
if file > 0 and speed > 0:
  for sec in range(speed, file, speed):
    download = speed * second
    percent = round((download / file) * 100)
    print(f"Прошло {second} сек. Скачано {download} из {file} Мб ({percent} %)")
    second += 1
  else:
    print(f"Прошло {second} сек. Скачано {file} из {file} Мб (100 %)")

Задача 4. Первая цифра
Дано положительное действительное число X. Выведите его первую цифру после десятичной точки. При решении этой задачи нельзя пользоваться условной инструкцией, циклом или строками.
Что оценивается
•	Результат вывода соответствует условию.
•	В вычислениях не используется for, if и работа со строками.
•	Input содержит корректное приглашение для ввода. 
•	Вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием).
number = float(input('Введите положительное действительное число: '))
x = (int(number * 10) % 10) 
print(x)
# сначала сдвигаем точку вправо, а потом выделяем последнюю цифру (единицу) числа
Задача 5. Вот это объёмы!
Для курсовой работы по физике Андрею нужно сравнить объёмы двух планет: Земли и теоретически возможной для нашей вселенной планеты. Андрей хорошо разбирается в формулах, но плохо считает. Объём Земли ему известен — это 1.08321 * 10 ** 12 км3.
Объём теоретически возможной планеты ему нужно посчитать. У него есть формула:
    V=43∙π∙R3 
В ней V — это объём, π — число пи, а R — радиус планеты.
Напишите программу, которая получает на вход радиус случайной планеты и выводит на экран, во сколько раз планета Земля меньше или больше теоретически возможной планеты по объёму. Ответ округлите до трёх знаков после запятой.
Пример 1:
Введите радиус случайной планеты: 3389.5
Объём планеты Земля больше в 6.641 раз
Пример 2:
Введите радиус теоретически возможной планеты: 7000
Объём планеты Земля меньше в (1/0.754) = 1.326 раз
import math

earth = 1.08321*10**12
R = float(input('Радиус случайной планеты (км): '))
V = (4/3 * math.pi * R**3)
print(V)

if earth > V:
  percent = round(earth / V, 3)
  print(f'Объём планеты Земля больше в {percent} раз')

elif earth < V:
  percent = round(V / earth, 3)
  print(f'Объём планеты Земля меньше в {percent} раз')

else:
  print('Объём планеты Земля равен объему случайной планеты.')

Задача 6. Ход конём
В рамках разработки шахматного ИИ стоит новая задача: по заданным вещественным координатам коня и точки программа должна определить, может ли конь ходить в эту точку. Используйте как можно меньше конструкций if и логических операторов. Обеспечьте контроль ввода.
Пример:
Введите местоположение коня:
0.071
0.118
Введите местоположение точки на доске:
0.213
0.068
Конь в клетке (0, 1). Точка в клетке (2, 0).
Да, конь может ходить в эту точку.

knight = print("Введите местоположение коня: ")
x_knight = float(input(" "))
y_knight = float(input(" "))

point = print("Введите местоположение точки на доске: ", end='\n')
x_point = float(input(" "))
y_point = float(input(" "))

if 0 < x_knight < 0.8 and 0 < y_knight < 0.8 and 0 < x_point < 0.8 and 0 < y_point < 0.8:
  x_knight = int(x_knight * 10)
  y_knight = int(y_knight * 10)
  x_point = int(x_point * 10)
  y_point = int(y_point * 10)
  print(f'Конь в клетке ({x_knight}, {y_knight}). Точка в клетке ({x_point}, {y_point}).')
else:
  print('Введены координаты за пределами доски!')
  # 2 точки по вертикали и 1 по горизонтали и наоборот
if (abs(x_knight - x_point) == 2 and abs(y_knight - y_point) == 1) or (abs(y_knight - y_point) == 2 and abs(x_knight - x_point) == 1):
  print('Да, конь может ходить в эту точку.')
else:
  print('Нет, конь не может ходить в эту точку.') 

Задача 7. За что?
Вы встретились со старым другом, который тоже изучает программирование, но в другом учебном заведении. За чашкой кофе он пожаловался, что их сумасбродный препод дал задание написать программу, которая из двух введённых чисел определяет наибольшее, не используя при этом условные операторы, циклы и встроенные функции вроде max/min/sorted. Радуясь, что на вашем курсе такого не требуют, вы всё-таки решаете помочь другу. Напишите для него программу.
Пример:
Введите первое число: 10
Введите второе число: 5
Наибольшее число: 10
a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
max = (a + b + abs(a - b))/2
print('Наибольшее число:', max)
максимальное: (a + b + abs(a - b)) / 2
минимальное: (a + b - abs(a - b)) / 2

4. Вложенные циклы

10.6 Практическая работа
Цели практической работы
Научиться:
•	решать задачи с вложенными циклами;
•	работать с конструкцией for-else.
Что входит в работу
•	Задание 1. Тестовое задание.
•	Задание 2. Лестница.
•	Задание 3. Рамка.
•	Задание 4. Простые числа.
•	Задание 5. Наибольшая сумма цифр.
•	Задание 6. Пирамидка.
•	Задание 7. Пирамидка-2.
•	Задание 8. Яма.

Задание 1. Тестовое задание
Степан устраивается на работу и должен выполнить тестовое задание: проанализировать таблицу, понять, как она строится, и написать программу для её вывода на экран.
 
Помогите Степану реализовать программу. 
Подсказка: обращайте внимание на номера столбцов и помните о литерале \t для табуляции.
rowN = int(input('Введите число для строк: '))
colN = int(input('Введите число для столбцов: '))
for row in range(rowN +1):
    for col in range(0, colN + 1, 2):
        print(row + col, end='\t')
    print()

Задание 2. Лестница
Напишите программу, которая выводит «лестницу» из чисел, когда пользователь вводит число N:
 
n = int(input("Введите число: "))
for start in range(1, n + 1):
  # print(start)
    for number in range(1, start + 1):
        print(start, end='\t')
    print()

Задание 3. Рамка
Напишите программу, которая рисует прямоугольную рамку с помощью символьной графики. Для вертикальных линий используйте символ вертикального штриха (|), а для горизонтальных — дефис (-). Пусть ширину и высоту рамки определяет пользователь.
 
row = int(input('Введите высоту рамки: '))
col = int(input('Введите ширину рамки: '))

for y in range(col):
    for x in range(row):
        if x == 0 or x == row -1:
            print('|', end='')
        elif y == 0 or y == col - 1:
            print('-', end='')
        else:
            print(' ', end='')
    print()

Задание 4. Простые числа
Напишите программу, которая считает количество простых чисел в заданной последовательности и выводит ответ на экран.
Простое число делится только на себя и на единицу. Последовательность задаётся при помощи вызова ввода (input) на каждой итерации цикла. Одна итерация — одно число.
Пример:
Введите количество чисел: 6.
Введите число: 4.
Введите число: 7.
Введите число: 20.
Введите число: 3.
Введите число: 11.
Введите число: 37.
Количество простых чисел в последовательности: 4.
seqNum = int(input("Введите количество чисел в последовательности: "))
count = 0
for num in range(seqNum):
  new_number = int(input("Введите число: "))
  for num2 in range(2, new_number):
    # print(num2)
    # print('*****', count)
    if (new_number % num2) == 0:
      break
  else:
    count += 1

if count == 0:
  print('Простые числа в последовательности не найдены.')
else:
  print('Количество простых чисел в последовательности: ', count)

Задание 5. Наибольшая сумма цифр
Пользователь вводит N чисел. Среди натуральных чисел, которые он указал, найдите наибольшее по сумме цифр. Выведите на экран это число и сумму его цифр.
Что оценивается
seqNum = int(input("Введите количество чисел в последовательности: "))
sum = 0
sumMax = 0
count = 0
countMax = 0
for num in range(seqNum):
  new_number = int(input("Введите число: "))
  count = new_number
  while new_number > 0:
    for i in range (new_number):
      sum += new_number % 10
      new_number //= 10
      # print('Сумма', sum, 'остаток цифры слева -', new_number, '++++', count)
      break
      
  if sum > sumMax:
    sumMax = sum
    sum = 0
    countMax = count
    count = 0
    # print('Сумма макс', sumMax)
  else:
    sum = 0
    count = 0

print('Наибольшее по сумме цифр число:', countMax, '; сумма его цифр: ', sumMax )

Задание 6. Пирамидка
Напишите программу, которая выводит на экран равнобедренный треугольник (пирамидку), заполненный символами хештега (#). Пусть высоту пирамиды определяет пользователь.
 
hight = int(input("Введите высоту пирамиды (рядов): "))
for row in range(hight):
  print(' ' * (hight - row - 1) + '#' * (row * 2 + 1))

Задание 7. Пирамидка-2
Напишите программу, которая получает на вход количество уровней пирамиды и выводит их на экран, заполняя нечётными числами:
 

height = int(input("Введите высоту пирамиды (рядов): "))
number = 1
 
for row in range(1, height + 1):
  print('\t' * (height - row), end = '')
  for col in range(row):
    print(number, end = '')
    number += 2
    print('\t' * 2, end = '')
  print()

Задание 8. Яма
Представьте, что вы разрабатываете компьютерную игру с текстовой графикой. Вам поручили создать генератор ландшафта. Напишите программу, которая получает на вход число N и выводит на экран числа в виде ямы:
 
height = int(input("Введите глубину ямы (рядов): "))
num = height - 1
 
while num >= 0:
    for row in range(-height, height + 1):
        if abs(row) > num:
            print(abs(row), end='')
        elif row == 0:
            print(end='')
        else:
            print('.', end='')
    num -= 1
    print()
































